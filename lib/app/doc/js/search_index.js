var search_data = {"index":{"searchIndex":["inferno","sequence","sequencebaseextension","blank?()","check_profiles()","coerce_to_a()","conforms_to_datetime_format()","get_all_replies()","get_all_resources()","how_many()","new()"],"longSearchIndex":["inferno","inferno::sequence","inferno::sequence::sequencebaseextension","inferno::sequence::sequencebaseextension#blank?()","inferno::sequence::sequencebaseextension#check_profiles()","inferno::sequence::sequencebaseextension#coerce_to_a()","inferno::sequence::sequencebaseextension#conforms_to_datetime_format()","inferno::sequence::sequencebaseextension#get_all_replies()","inferno::sequence::sequencebaseextension#get_all_resources()","inferno::sequence::sequencebaseextension#how_many()","inferno::sequence::sequencebaseextension::new()"],"info":[["Inferno","","Inferno.html","",""],["Inferno::Sequence","","Inferno/Sequence.html","",""],["Inferno::Sequence::SequenceBaseExtension","","Inferno/Sequence/SequenceBaseExtension.html","","<p>Adds functionality on top of SequenceBase\n"],["blank?","Inferno::Sequence::SequenceBaseExtension","Inferno/Sequence/SequenceBaseExtension.html#method-i-blank-3F","(param)","<p>Returns <code>true</code> if <code>param</code> is <code>nil</code> or empty, <code>false</code> otherwise\n"],["check_profiles","Inferno::Sequence::SequenceBaseExtension","Inferno/Sequence/SequenceBaseExtension.html#method-i-check_profiles","(resources = nil, klasses = nil, profiles = nil)","<p>Checks validity of profiles by testing all aspects of the server that fall under the intersection of …\n"],["coerce_to_a","Inferno::Sequence::SequenceBaseExtension","Inferno/Sequence/SequenceBaseExtension.html#method-i-coerce_to_a","(param)","<p>Returns <code>nil</code> if <code>param</code> is falsy, returns <code>param.to_a</code> if possible, otherwise returns <code>param</code> as only element …\n"],["conforms_to_dateTime_format","Inferno::Sequence::SequenceBaseExtension","Inferno/Sequence/SequenceBaseExtension.html#method-i-conforms_to_dateTime_format","(str)","<p>Returns <code>true</code> if <code>str</code> conforms to HL7&#39;s <code>dateTime</code> format, <code>false</code> otherwise\n"],["get_all_replies","Inferno::Sequence::SequenceBaseExtension","Inferno/Sequence/SequenceBaseExtension.html#method-i-get_all_replies","(klasses = nil)","<p>Retrieves all bundles from server when requesting every resource of each type in the <code>klasses</code> array.  …\n"],["get_all_resources","Inferno::Sequence::SequenceBaseExtension","Inferno/Sequence/SequenceBaseExtension.html#method-i-get_all_resources","(klasses = nil)","<p>Calls <code>get_all_replies</code> with <code>klasses</code> for server&#39;s responses. Filters responses to return an array where, …\n"],["how_many","Inferno::Sequence::SequenceBaseExtension","Inferno/Sequence/SequenceBaseExtension.html#method-i-how_many","(klass)","<p>Returns how many resources of the type <code>klass</code> are stored in server\n"],["new","Inferno::Sequence::SequenceBaseExtension","Inferno/Sequence/SequenceBaseExtension.html#method-c-new","(instance, client, disable_tls_tests = false, sequence_result = nil, metadata_only = false)","<p>initializer appeals to parent initializer\n"]]}}